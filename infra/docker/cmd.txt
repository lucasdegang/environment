### Containers

# List of some good images in https://hub.docker.com/ or https://hub.docker.com/search?q=&type=image: nginx, mongodb, postgres, apache, mcr.microsoft.com/dotnet/aspnet, debian, ubuntu

# Terminal

> Image : mongo, debian, ubuntu ...
docker image pull [image]

> Run command : is responsible for pull of some image, create container and run container from some image(s)
Obs.: each run command create a new container.

> Run --rm : execute the command and at end the list of ps -a wont show this container.
docker container run --rm [image] 

> Run -it (interative mode, access to terminal) used in container creation
docker container run -it [image]

> Run -ai (attached, interative mode) used in container start
docker container run -ai [image]

> Run port : example port 8080:80, to link the host machine and server
docker container run -p 8080:80 [image]

> Run volume : mapping folder from host to server
Obs.: example with nginx image in the following command. You can build some web page (project) and use volume to start in server. 

Syntax: docker container run [port] -v [command] [image]

ex1: Static archives
      - /[root]/[folder]/[file.extension]
      - Project>html>.html
      - Project>js>.js
      - ....
	windows:
		docker container run -p 8080:80 -v C:/Users/lucas.flor/Desktop/curso-docker/ex-volume/html:/usr/share/nginx/html nginx

	linux:
		docker container run -p 8080:80 -v $(pwd):/usr/share/nginx/html nginx

> Run background -d : daemon, this is of one better benefits of docker. You can follow occurs in log (docker IDE).
Syntax: docker container run -d [name] [port] [volume] [image]

ex1: Daemon nginx port 8080
      docker container run -d --name ex-daemon-basic -p 8080:80 -v C:/Users/lucas.flor/Desktop/curso-docker/ex-volume/html:/usr/share/nginx/html nginx

> Run --net (network) : search in this file "Docker network"
docker container run -d --net [network] [image]

> Create container name : the container name is unique for all containers in machine
Obs.: * when in terminal mode, on exit, the container die.
*docker container run --name [containerName] [mode] [image]
 docker container run --name [containerName] [port] [image]
*docker contianer run --name [containerName] [mode] [port] [image]

----
# Docker build image: Dockerfile archive. Create image from Dockerfile archive in your project.
Syntax: docker image build [-t] [name of this image] [directory/root or . (for terminal from local folder)]

docker image build -t ex-simple-build .
docker image ls

----
# Docker logs : show all logs of container's life
docker container logs [containerName]

----
# Docker inspect : show the structure of your container in json mode
docker container inspect [containerName]
docker network inspect [network]

----
# Docker Management

> Start cotainer name
docker container ps
docker container start [mode] [containerName]
docker container start [containerName]

> Restart container name
docker container ps
docker container restart [name]

> Stop container name
docker container ps
docker container stop [name]

----
# Docker topic

Docker container [something]
Docker imgage [something]
Docker volume [something]
Docker network [something] 
	* none, bridge (defaut), host (machine config and more exposed)
	* create --driver [network] [nameNetwork]

----
# Docker tag : pointer for a specific image
docker image ls
docker image tag [image] newImageName
docker image ls

----
# Docker compose create the docker-compose.yml in your project folder and must run terminal from current project
docker-compose up

----
# Tips
> Show all content of the topic. 
docker [topic] ls [-a]
docker [topic] ps [-a]
docker [topic] list [-a]
docker [topic] --help

> (microservice) : one container for each ms

----
# Dockerfile : each command in Dockerfile is one layer. For production solutions use a specific version of image. 

* Tips : https://docs.docker.com/engine/reference/builder/

*Ex=1
	// Using image from some version 
	FROM nginx:latest
	// Writting some out by html tag for nginx share : in and out '>'
	RUN echo '<h1>Hello World !</h1>' > /usr/share/nginx/html/index.html
*Ex=2
	FROM debian

	// maintenance person or team
	LABEL maintainer 'Lucas Degang'

	// Argument for AWS for example with name files. This name can be changed.
	ARG S3_BUCKET=files

	// Environment variable
	ENV S3_BUCKET=${S3_BUCKET}

*Usage: From cmd root folder, the DOT command has value of current directory where is the Dockerfile, ex.: /activities/[folder]/"Dockerfile" OR "*l"
docker image build -t [nameImage] .
docker container run --name[containerName] -p 80:80 [nameImage]
docker container run -it -v C:\Users\lucas.flor\Desktop\curso-docker\build-dev:/app -p 80:8000 --name python-server ex-build-dev

----
# Others : Container with default port with same name 
docker run -d -p 27017:27017 --name mongodb mongo -v /data/db:/data/db

[ part 1 - docker run -d] : Here, we are running the docker container with a detached mode. there are two mode to run docker container. one is detached and another one is interactive mode. Detached mode will run in background whereas interactive mode runs in the foreground(terminal will be active).
Problem with interactive mode is if you close the terminal, container will stop running.

[ part 2 - -p 27017:27017] : Here, -p represents the port of the container. you can map the port of the container and your machine port to communicate with the container. As MongoDB always run in port 27017, we map the ports here.

[ part 3 - --name mongodb mongo ] : After that, we added flag --name which represents the docker container name. you can specify the name you want to have it for your mongoDB container.

[ part 4 - -v /data/db:/data/db ] : Lastly, we mount the volume of docker container and local machine volume. This is one of the important commands in the whole part.
-v /data/db:/data/db mount the volume of docker container db directory and local machine db directory. so that, you won't lose your database data even after restarting the container.

